From 4d27e97493e33bf97ddb4e70422837982f8fee7a Mon Sep 17 00:00:00 2001
From: David Shea <reallylongword@gmail.com>
Date: Mon, 3 Oct 2022 22:49:47 -0400
Subject: [PATCH 1/7] Remove the docs build from setup.py

All of the sphinx distutils/setuputils stuff is deprecated, since with
PEP517/518 these tools are getting out of the business of providing a
CLI.

Docs can still be generated by running sphinx-build if needed.
---
 setup.py | 202 +------------------------------------------------------
 1 file changed, 2 insertions(+), 200 deletions(-)

diff --git a/setup.py b/setup.py
index 8d984f6..5f23615 100644
--- a/setup.py
+++ b/setup.py
@@ -5,37 +5,15 @@
 import sys
 import os
 import re
-import subprocess
-import re
 
-from distutils.core import setup, Extension, Command
-from distutils.spawn import find_executable, spawn
-from distutils import log
-from distutils.filelist import FileList
-from distutils.util import subst_vars, change_root
+from distutils.core import setup, Extension
 from distutils.command.build_py import build_py as _build_py
 from distutils.command.sdist import sdist as _sdist
-from sphinx.setup_command import BuildDoc as SphinxBuildDoc
 
 name = 'python-nss'
 version = "1.0.1"
 release = version
 
-doc_manifest = [
-    [['include README LICENSE* doc/ChangeLog',
-      'recursive-include doc *.py *.txt',
-      'prune doc/examples/pki',
-      'prune doc/sphinx'],
-     [('^doc/', '')], None],
-    [['recursive-include test run_tests setup_certs.py test_*.py util.py *.txt',
-      'prune test/pki'],
-     None , None],
-    [['recursive-include lib *.py *.txt',],
-     [('^lib/', '')] , 'examples'],
-    [['recursive-include build/sphinx/html *'],
-     [('^build/sphinx/', 'api/')], None],
-]
-
 def update_version():
     """If the version string in __init__.py doesn't match the current
     version then edit the file replacing the version string
@@ -112,173 +90,6 @@ class SDist(_sdist):
         update_version()
         _sdist.run(self)
 
-
-class BuildDoc(Command):
-    description = 'generate documentation'
-    user_options = [('docdir=', 'd', "directory root for documentation"),
-                   ]
-
-    def has_sphinx (self):
-        if find_executable('sphinx-build'):
-            return True
-        else:
-            return False
-
-    sub_commands = [('build_sphinx', has_sphinx),
-                   ]
-
-    def initialize_options(self):
-        self.build_base = None
-        self.build_lib = None
-        self.docdir = None
-
-    def finalize_options(self):
-        self.set_undefined_options('build',
-                                   ('build_base', 'build_base'),
-                                   ('build_lib', 'build_lib'))
-        if self.docdir is None:
-            self.docdir = change_root(self.build_base, 'doc')
-
-    def run(self):
-        self.run_command('build')
-        # Add build directory to Python path so doc builder can import
-        # in-tree built modules
-        sys.path.insert(0, self.build_lib)
-        for cmd_name in self.get_sub_commands():
-            self.run_command(cmd_name)
-        # Remove the build directory from Python path
-        del sys.path[0]
-
-
-
-class InstallDoc(Command):
-    description = 'install documentation'
-    user_options = [('docdir=', 'd', "directory root for documentation"),
-                    ('root=', None,
-                     "install everything relative to this alternate root directory"),
-                    ('skip-build', None,
-                     "skip rebuilding everything (for testing/debugging)"),
-                   ]
-
-    def initialize_options(self):
-        self.root = None
-        self.build_base = None
-        self.docdir = None
-        self.skip_build = False
-
-    def finalize_options(self):
-        self.set_undefined_options('install',
-                                   ('root', 'root'))
-        self.set_undefined_options('build',
-                                   ('build_base', 'build_base'))
-
-        if self.docdir is None:
-            self.docdir = change_root(self.build_base, 'doc')
-
-    def run(self):
-        if not self.skip_build:
-            self.run_command('build_doc')
-
-
-        dst_root = change_root(self.root, self.docdir)
-        self.copy_transformed_tree(doc_manifest,
-                                   dst_root=dst_root,
-                                   substitutions={'docdir' : self.docdir})
-
-    def copy_transformed_tree(self, install_specs, dst_root=None, src_root=None, substitutions={}):
-        """
-        Copy parts of a source tree to a destination tree with a
-        different tree structure and/or names.
-
-        The basic idea: given a set of source files, copy them to a
-        destination directory, let's call this operation an
-        install_spec. A sequence of install_spec's allows one to build
-        up the destrination tree in any structure desired.
-
-        Each install_spec consists of 3 components
-        (manifest_template, dst_xforms, dst_dir):
-
-        The manifest_template is a sequence where each item is identical
-        to a line in the MANIFEST.in template described in distutils. This
-        gives you ability to easily specify a set of source files in a
-        compact abstract manner (with recursion, exclusion, etc.) The
-        manifest_template yields a sequence of source paths.
-
-        dst_xforms is a sequence of regular expression substitutions
-        applied to the each source path to yield a rewritten destination
-        path. Each transform is expressed as a two-valued sequence
-        (pattern, replacement)
-
-        dst_dir is a destination directory where the destinations paths
-        are written to. dst_dir is always relative to the dst_root.
-
-        All input may be parametrized via variable substitutions
-        supplied by a substitution dict. Any use of $name will cause
-        name to be looked up first in the substitution dict and then
-        if its not found there in the enviorment. If found it will be
-        replaced with it's value.
-
-        The pseudo code algorithm for processing an install_spec is:
-
-        substitute all variables in manifest template
-        src_list = evaluate manifest template
-        for each src_path in src_list:
-            dst_path = src_path
-            for each xform in dst_xform:
-                apply xform to dst_path
-            copy src_root+src_path to dst_root+dest_dir+dest_path
-
-        This process is repeated for each install spec. The src_root and
-        dst_root are also subject to variable substitution.
-
-
-        Examples:
-
-        Copy all text files in build/doc to doc:
-
-            copy_transformed_tree([[["include build/doc *.txt"], None, 'doc']])
-
-        Copy all html files found under build to doc/html and change the extension from
-        .html to .htm
-
-            copy_transformed_tree([[["include build *.html"], [('\.html$','.htm')], 'doc']])
-
-    """
-
-        if src_root is not None: src_root = subst_vars(src_root, substitutions)
-        if dst_root is not None: dst_root = subst_vars(dst_root, substitutions)
-
-        filelist = FileList()
-        if src_root is None:
-            filelist.findall()
-        else:
-            filelist.findall(src_root)
-
-        for manifest_template, dst_xforms, dst_dir in install_specs:
-            if dst_dir is not None: dst_dir = subst_vars(dst_dir, substitutions)
-
-            filelist.files = [] # reinitialize to empty
-
-            for line in manifest_template:
-                filelist.process_template_line(subst_vars(line, substitutions))
-
-            for src_path in filelist.files:
-                dst_path = src_path
-                if dst_xforms:
-                    for dst_xform in dst_xforms:
-                        dst_path = re.sub(dst_xform[0], dst_xform[1], dst_path)
-                if dst_dir is not None:
-                    dst_path = change_root(dst_dir, dst_path)
-                if dst_root is None:
-                    full_dst_path = dst_path
-                else:
-                    full_dst_path = change_root(dst_root, dst_path)
-                full_dst_dir = os.path.dirname(full_dst_path)
-                self.mkpath(full_dst_dir)
-                self.copy_file(src_path, full_dst_path)
-
-
-
 #------------------------------------------------------------------------------
 
 def main(argv):
@@ -365,18 +176,9 @@ def main(argv):
                              ],
           package_dir      = {'nss':'src'},
           packages         = ['nss'],
-          cmdclass         = {'build_doc'     : BuildDoc,
-                              'build_sphinx'  : SphinxBuildDoc,
-                              'install_doc'   : InstallDoc,
-                              'build_py'      : BuildPy,
+          cmdclass         = {'build_py'      : BuildPy,
                               'sdist'         : SDist,
                              },
-          command_options={
-              'build_sphinx': {
-                  'project': ('setup.py', name),
-                  'version': ('setup.py', version),
-                  'release': ('setup.py', release),
-                  'source_dir': ('setup.py', 'doc/sphinx/source')}},
     )
 
     return 0
-- 
2.37.3

