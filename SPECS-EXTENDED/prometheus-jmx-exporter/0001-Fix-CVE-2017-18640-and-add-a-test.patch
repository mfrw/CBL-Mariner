From 66c59b18fc053053d1afeabde3fb74caa03b7de4 Mon Sep 17 00:00:00 2001
From: Severin Gehwolf <sgehwolf@redhat.com>
Date: Tue, 31 Aug 2021 19:02:02 +0200
Subject: [PATCH] Fix CVE-2017-18640 and add a test

---
 collector/pom.xml                             |  2 +-
 .../java/io/prometheus/jmx/JmxCollector.java  | 40 +++++++++++++++----
 .../io/prometheus/jmx/JmxCollectorTest.java   | 40 +++++++++++++------
 collector/src/test/resources/testyaml.config  |  9 +++++
 4 files changed, 70 insertions(+), 21 deletions(-)
 create mode 100644 collector/src/test/resources/testyaml.config

diff --git a/collector/pom.xml b/collector/pom.xml
index 7e73aba..8f69a87 100644
--- a/collector/pom.xml
+++ b/collector/pom.xml
@@ -28,7 +28,7 @@
     <dependency>
       <groupId>org.yaml</groupId>
       <artifactId>snakeyaml</artifactId>
-      <version>1.23</version> <!-- required for the Java 6 release -->
+      <version>1.26</version> <!-- required for the Java 6 release -->
     </dependency>
   </dependencies>
 
diff --git a/collector/src/main/java/io/prometheus/jmx/JmxCollector.java b/collector/src/main/java/io/prometheus/jmx/JmxCollector.java
index 7758bd5..324d771 100644
--- a/collector/src/main/java/io/prometheus/jmx/JmxCollector.java
+++ b/collector/src/main/java/io/prometheus/jmx/JmxCollector.java
@@ -1,8 +1,6 @@
 package io.prometheus.jmx;
 
-import io.prometheus.client.Collector;
-import io.prometheus.client.Counter;
-import org.yaml.snakeyaml.Yaml;
+import static java.lang.String.format;
 
 import java.io.File;
 import java.io.FileReader;
@@ -22,10 +20,15 @@ import java.util.TreeMap;
 import java.util.logging.Logger;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
+
 import javax.management.MalformedObjectNameException;
 import javax.management.ObjectName;
 
-import static java.lang.String.format;
+import org.yaml.snakeyaml.Yaml;
+import org.yaml.snakeyaml.error.YAMLException;
+
+import io.prometheus.client.Collector;
+import io.prometheus.client.Counter;
 
 public class JmxCollector extends Collector implements Collector.Describable {
     static final Counter configReloadSuccess = Counter.build()
@@ -75,16 +78,37 @@ public class JmxCollector extends Collector implements Collector.Describable {
 
     public JmxCollector(File in) throws IOException, MalformedObjectNameException {
         configFile = in;
-        config = loadConfig((Map<String, Object>)new Yaml().load(new FileReader(in)));
+        config = loadConfig(loadYaml(new FileReader(in)));
         config.lastUpdate = configFile.lastModified();
     }
 
     public JmxCollector(String yamlConfig) throws MalformedObjectNameException {
-      config = loadConfig((Map<String, Object>)new Yaml().load(yamlConfig));
+      config = loadConfig(loadYaml(yamlConfig));
     }
 
     public JmxCollector(InputStream inputStream) throws MalformedObjectNameException {
-      config = loadConfig((Map<String, Object>)new Yaml().load(inputStream));
+      config = loadConfig(loadYaml(inputStream));
+    }
+
+    private static Map<String, Object> loadYaml(Object input) {
+        // Be defensive about loading yaml from a user. In some cases YAMLException
+        // will be thrown for bad configs
+        try {
+            if (input instanceof FileReader) {
+                FileReader fr = (FileReader)input;
+                return (Map<String, Object>)new Yaml().load(fr);
+            } else if (input instanceof String) {
+                String i = (String)input;
+                return (Map<String, Object>)new Yaml().load(i);
+            } else if (input instanceof InputStream) {
+                InputStream is = (InputStream)input;
+                return (Map<String, Object>)new Yaml().load(is);
+            }
+        } catch (YAMLException e) {
+            System.err.println("YAML configuration error: " + e.getMessage());
+            throw new IllegalArgumentException(e);
+        }
+        throw new IllegalArgumentException("Unexpected input type: " + input.getClass());
     }
 
     private void reloadConfig() {
@@ -92,7 +116,7 @@ public class JmxCollector extends Collector implements Collector.Describable {
         FileReader fr = new FileReader(configFile);
 
         try {
-          Map<String, Object> newYamlConfig = (Map<String, Object>)new Yaml().load(fr);
+          Map<String, Object> newYamlConfig = loadYaml(fr);
           config = loadConfig(newYamlConfig);
           config.lastUpdate = configFile.lastModified();
           configReloadSuccess.inc();
diff --git a/collector/src/test/java/io/prometheus/jmx/JmxCollectorTest.java b/collector/src/test/java/io/prometheus/jmx/JmxCollectorTest.java
index bb0593a..68d89d0 100644
--- a/collector/src/test/java/io/prometheus/jmx/JmxCollectorTest.java
+++ b/collector/src/test/java/io/prometheus/jmx/JmxCollectorTest.java
@@ -1,23 +1,25 @@
 package io.prometheus.jmx;
 
-import io.prometheus.client.Collector;
-import io.prometheus.client.CollectorRegistry;
-import io.prometheus.client.Collector.MetricFamilySamples;
-
-import org.junit.Before;
-import org.junit.BeforeClass;
-import org.junit.Test;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
 
+import java.io.File;
 import java.lang.management.ManagementFactory;
 import java.util.List;
 
 import javax.management.MBeanServer;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.yaml.snakeyaml.error.YAMLException;
+
+import io.prometheus.client.Collector;
+import io.prometheus.client.Collector.MetricFamilySamples;
+import io.prometheus.client.CollectorRegistry;
 
 public class JmxCollectorTest {
 
@@ -298,4 +300,18 @@ public class JmxCollectorTest {
         samples = jc.collect();
         assertEquals("help message", samples.get(0).help);
     }
+
+    @Test
+    public void testBillionLaughs() throws Exception {
+      File configFile = new File(getClass().getResource("/testyaml.config").getPath());
+      assertTrue(configFile.exists());
+      try {
+        JmxCollector jc = new JmxCollector(configFile);
+        fail("Excected yaml exception due to billion laughs");
+      } catch (IllegalArgumentException e) {
+        Throwable ex = e.getCause();
+        String prefix = YAMLException.class.getName() + ": ";
+        assertEquals(prefix + "Number of aliases for non-scalar nodes exceeds the specified max=50", e.getMessage());
+      }
+    }
 }
diff --git a/collector/src/test/resources/testyaml.config b/collector/src/test/resources/testyaml.config
new file mode 100644
index 0000000..4a3ed69
--- /dev/null
+++ b/collector/src/test/resources/testyaml.config
@@ -0,0 +1,9 @@
+a: &a ["lol","lol","lol","lol","lol","lol","lol","lol","lol"]
+b: &b [*a,*a,*a,*a,*a,*a,*a,*a,*a]
+c: &c [*b,*b,*b,*b,*b,*b,*b,*b,*b]
+d: &d [*c,*c,*c,*c,*c,*c,*c,*c,*c]
+e: &e [*d,*d,*d,*d,*d,*d,*d,*d,*d]
+f: &f [*e,*e,*e,*e,*e,*e,*e,*e,*e]
+g: &g [*f,*f,*f,*f,*f,*f,*f,*f,*f]
+h: &h [*g,*g,*g,*g,*g,*g,*g,*g,*g]
+i: &i [*h,*h,*h,*h,*h,*h,*h,*h,*h]
\ No newline at end of file
-- 
2.31.1

