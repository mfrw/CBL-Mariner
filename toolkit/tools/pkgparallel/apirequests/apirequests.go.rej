diff a/toolkit/tools/pkgparallel/apirequests/apirequests.go b/toolkit/tools/pkgparallel/apirequests/apirequests.go	(rejected hunks)
@@ -6,13 +6,12 @@ import (
     "log"
     "io/ioutil"
     "net/http"
-	"pkggraph"
     "github.com/gorilla/mux"
 )
 
 // Article - Our struct for all articles
 type Pkg struct {
-    PkgID      	 int    `json:"PkgID"`
+    PkgID      	 string    `json:"PkgID"`
     StatusCode   string `json:"StatusCode"`
 }
 
@@ -70,11 +69,11 @@ func updatePkgs(w http.ResponseWriter, r *http.Request) {
 	}
 	json.Unmarshal(reqBody, &pkg)
 
-	for i, package := range Pkgs {
-		if package.ID == id {
-			package.StatusCode = pkg.StatusCode
-			Pkgs = append(Pkgs[:i], package)
-			json.NewEncoder(w).Encode(package)
+	for i, pack := range Pkgs {
+		if pack.PkgID == id {
+			pack.StatusCode = pkg.StatusCode
+			Pkgs = append(Pkgs[:i], pack)
+			json.NewEncoder(w).Encode(pack)
 		}
 	}
 }
@@ -86,14 +85,6 @@ func handleRequests() {
     myRouter.HandleFunc("/pkg", createNewPkg).Methods("POST")
     myRouter.HandleFunc("/pkg/{id}", deletePkg).Methods("DELETE")
     myRouter.HandleFunc("/pkg/{id}", returnSinglePkgs)
-	myrouter.HandleFunc("/pkg/{id}", updatePkgs).Methods("PATCH")
+	myRouter.HandleFunc("/pkg/{id}", updatePkgs).Methods("PATCH")
     log.Fatal(http.ListenAndServe(":10000", myRouter))
-}
-
-func main() {
-    Pkgs = []Pkg{
-        Pkg{PkgID:"123", StatusCode:"Building"},
-        Pkg{PkgID:"231", StatusCode:"Queued"},
-    }
-    handleRequests()
 }
\ No newline at end of file
